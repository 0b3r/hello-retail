frameworkVersion: '>=1.0.0 <2.0.0'

service: ${self:custom.helloRetail.name}-user-info-api

# TODO: Consider enforcing schema versions

custom:
  stage: ${opt:stage, self:provider.stage, self:custom.private.stage}
  private: ${file(../../private.yml)}
  helloRetail: ${file(../../helloRetail.yml)}
  retailStreamVersion: 1
  retailStream: ${file(../../retail-stream/serverless.yml)}
  userInfoApiVersion: 1
  userInfoApi: ${self:}
  # Exports
  exportUserInfoRestApi: ${self:custom.userInfoApi.service}:${self:custom.stage}:UserInfoRestApi${self:custom.userInfoApiVersion}

provider:
  name: aws
  deploymentBucket: ${self:custom.helloRetail.deploymentBucket}
  runtime: nodejs4.3
  profile: ${self:custom.private.profile}
  region: ${self:custom.private.region}

functions:
  loginUser:
    role:
      Fn::GetAtt: [ UserInfoReaderWriter, Arn ]
    handler: userInfoApi.loginUser
    environment:
      STREAM_NAME:
        Fn::ImportValue: ${self:custom.retailStream.custom.exportRetailStreamName}
    events:
      - http:
          path: login-user
          method: post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  updatePhone:
    role:
      Fn::GetAtt: [ UserInfoReaderWriter, Arn ]
    handler: userInfoApi.updatePhone
    environment:
      STREAM_NAME:
        Fn::ImportValue: ${self:custom.retailStream.custom.exportRetailStreamName}
    events:
      - http:
          path: update-phone
          method: post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  addRole:
    role:
      Fn::GetAtt: [ UserInfoReaderWriter, Arn ]
    handler: userInfoApi.addRole
    environment:
      STREAM_NAME:
        Fn::ImportValue: ${self:custom.retailStream.custom.exportRetailStreamName}
    events:
      - http:
          path: add-role
          method: post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

resources:
  Resources:
    # Log Group
    LoginUserLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:custom.stage}-loginUser
        RetentionInDays: 7
    UpdatePhoneLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:custom.stage}-updatePhone
        RetentionInDays: 7
    AddRoleLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:custom.stage}-addRole
        RetentionInDays: 7

    # TODO: When implementing builder, create new role and transfer Kinesis read and Dynamo write rights to that service's role
    # TODO: Consider separating the roles of the lambdas.
    UserInfoReaderWriter: # role for the User Info Lambdas
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.stage}UserInfoReaderWriter${self:custom.userInfoApiVersion}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                Service: lambda.amazonaws.com
        ManagedPolicyArns:
          - ${self:custom.private.teamPolicy}
        Policies:
          - PolicyName: CreateAndWriteToLogStream
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource:
                    - Fn::Join:
                      - ':'
                      - - Fn::GetAtt: [ LoginUserLogGroup, Arn ]
                        - '*'
                    - Fn::Join:
                      - ':'
                      - - Fn::GetAtt: [ UpdatePhoneLogGroup, Arn ]
                        - '*'
                    - Fn::Join:
                      - ':'
                      - - Fn::GetAtt: [ AddRoleLogGroup, Arn ]
                        - '*'
          - PolicyName: WriteToKinesis
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'kinesis:PutRecord'
                  Resource:
                    Fn::ImportValue: ${self:custom.retailStream.custom.exportRetailStreamArn}

#    # NOTE: These names gleaned from SLS generated CF template
#    # MAY BE INCOMPLETE, resulting in inability to auth :(
#    ApiGatewayMethodLoginDashuserOptions:
#      Properties:
#        AuthorizationType: AWS_IAM
#    ApiGatewayMethodUpdateDashphoneOptions:
#      Properties:
#        AuthorizationType: AWS_IAM
#    ApiGatewayMethodAddDashroleOptions:
#      Properties:
#        AuthorizationType: AWS_IAM

  Outputs:
    UserInfoRestAPI:
      Description: API used to submit user information
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:custom.userInfoApi.custom.exportUserInfoRestApi}
