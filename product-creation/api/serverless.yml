frameworkVersion: '>=1.0.0 <2.0.0'

service: ${self:custom.helloRetail.name}-product-creation-api

# TODO: Consider enforcing schema versions

custom:
  stage: ${opt:stage, self:provider.stage, self:custom.private.stage}
  private: ${file(../../private.yml)}
  helloRetail: ${file(../../helloRetail.yml)}
  retailStreamVersion: 1
  retailStream: ${file(../../retail-stream/serverless.yml)}
  serviceName: ${self:service}
  userInfoApiVersion: 1
  userInfoApi: ${file(../../user-info/api/serverless.yml)}
  productCreationApi: ${self:}
  # Exports
  exportProductCreationClientArn: ${self:custom.productCreationApi.service}:${self:custom.stage}:ProductCreationClientArn
  exportProductCreationWriterArn: ${self:custom.productCreationApi.service}:${self:custom.stage}:ProductCreationReaderWriterArn
  exportProductCreationRestAPI: ${self:custom.productCreationApi.service}:${self:custom.stage}:ProductCreationRestAPI

provider:
  name: aws
  deploymentBucket: ${self:custom.helloRetail.deploymentBucket}
  runtime: nodejs4.3
  profile: ${self:custom.private.profile}
  region: ${self:custom.private.region}

functions:
  productCreate:
    role:
      Fn::GetAtt: [ ProductCreationWriter, Arn ]
    handler: productCreationApi.productCreate
    environment:
      STAGE: ${self:custom.stage}
      STREAM_WRITER_ROLE:
        Fn::ImportValue: ${self:custom.retailStream.custom.exportRetailStreamWriterArn}
      STREAM_NAME:
        Fn::ImportValue: ${self:custom.retailStream.custom.exportRetailStreamName}
    events:
      - http:
          path: product-create
          method: post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

resources:
  Resources:
    # Log Group
    ProductCreationLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:custom.stage}-productCreate
        RetentionInDays: 7

    # User Information Roles
    ProductCreationClient: # role for consumers of the Product Create API
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.stage}ProductCreationClient
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                AWS: # role ARNs that are allowed to call the Product Create API
                  - 'arn:aws:iam::${self:custom.private.accountId}:role/${self:custom.private.teamRole}'
                  - 'arn:aws:iam::${self:custom.private.accountId}:role/${self:custom.stage}HelloRetailWebIdentity'
        ManagedPolicyArns:
          - ${self:custom.private.teamPolicy}
        Policies:
          - PolicyName: ReadFromApi
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'execute-api:Invoke'
                  Resource:
                    Fn::Join:
                      - ''
                      - - 'arn:aws:execute-api:${self:provider.region}:${self:custom.private.accountId}:'
                        - Ref: ApiGatewayRestApi
                        - '/${self:custom.stage}/*/*'

    # TODO: When implementing builder, create new role and transfer Kinesis read and Dynamo write rights to that service's role
    ProductCreationWriter: # role for the Product Create Lambdas
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.stage}ProductCreationWriter
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                AWS: # role ARNs that are allowed to call the Product Create API
                  - 'arn:aws:iam::${self:custom.private.accountId}:role/${self:custom.private.teamRole}'
                  - 'arn:aws:iam::${self:custom.private.accountId}:role/${self:custom.stage}RetailStreamWriter'
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                Service: 'lambda.amazonaws.com'
        ManagedPolicyArns:
          - ${self:custom.private.teamPolicy}
        Policies:
          - PolicyName: CreateAndWriteToLogStream
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource:
                    - Fn::Join:
                      - ':'
                      - - Fn::GetAtt: [ ProductCreationLogGroup, Arn ]
                        - '*'
          - PolicyName: WriteToKinesis
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'kinesis:PutRecord'
                  Resource:
                    Fn::ImportValue: ${self:custom.retailStream.custom.exportRetailStreamArn}


    # NOTE: This named gleaned from SLS generated CF template
#    ApiGatewayMethodUserDashinfoPost:
#      Properties:
#        AuthorizationType: AWS_IAM

  Outputs:
    ProductCreationClientArn:
      Description: Arn for role used by clients of the Product Create API
      Value:
        Fn::GetAtt: [ ProductCreationClient, Arn ]
      Export:
        Name: ${self:custom.productCreationApi.custom.exportProductCreationClientArn}
    ProductCreationWriterArn:
      Description: A role allowing for reading from kinesis and writing to dynamo
      Value:
        Fn::GetAtt: [ ProductCreationWriter, Arn ]
      Export:
        Name: ${self:custom.productCreationApi.custom.exportProductCreationWriterArn}
    ProductCreationRestAPI:
      Description: API used to submit product creation events
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:custom.productCreationApi.custom.exportProductCreationRestAPI}
